@implements IAsyncDisposable
@inject IJSRuntime JS
<nav class="fixed flex h-[42px] mt-1 ml-1 bg-green-950/70 dark:bg-black/70">
    @{
        /* Home and nav links */
    }
    <NavLink href="/" class="mr-2" aria-label="home">
        <button type="button" class="menuButton" aria-label="home">
            <Icon Name="house" Padding="@IconPadding" Size="@_iconSize" />
        </button>
    </NavLink>
    @foreach (var link in _navLinks)
    {
        <NavLink href="@link" class="mr-2">
            <button type="button" class="menuButton p-1 text-lg/[32px]">
                @link
            </button>
        </NavLink>
    }
    @{
        /* Theme */
    }
    <div class="mr-2">
        <button type="button" @onclick="ToggleTheme" class="menuButton" aria-label="theme">
            @if (_darkMode)
            {
                <Icon Name="sun-fill" Padding="@IconPadding" Size="@_iconSize" />
            }
            else
            {
                <Icon Name="moon-fill" Padding="@IconPadding" Size="@_iconSize" />
            }
        </button>
    </div>
    @{
            /* Menu location */
    }
    <div class="mr-2">
        <button type="button" class="menuButton" aria-label="unused">
            <Icon Name="box-arrow-in-left" Padding="@IconPadding" Size="@_iconSize" />
        </button>
    </div>
    @{
        /* Future */
    }
    <div class="mr-2">
        <button type="button" class="menuButton" aria-label="unused">
            <Icon Name="arrows-collapse" Padding="@IconPadding" Size="@_iconSize" />
        </button>
    </div>
    <div class="mr-2">
        <button type="button" class="menuButton" aria-label="unused">
            <Icon Name="arrows-expand" Padding="@IconPadding" Size="@_iconSize" />
        </button>
    </div>
</nav>
<div class="h-[48px] min-h-full">
    @{
        /* this pushes content down so menu not on top of page (even tho it hovers on top of it) */
    }
</div>
@code {
    private bool _darkMode = false;
    private IJSObjectReference? _js;
    private static string[] _navLinks = new string[] { "articles", "storybook", "icons" };
    private int IconPadding => 2;
    private int _iconSize => 36;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _js = await JS.InvokeAsync<IJSObjectReference>("import", "./Shared/MenuTop.razor.js");
            _darkMode = await _js.InvokeAsync<bool>("isDarkModeDefault");
            if (_darkMode)
            {
                await _js.InvokeVoidAsync("toggleDarkMode");
                StateHasChanged();
            }
        }
    }

    private async Task ToggleTheme()
    {
        _darkMode = !_darkMode;
        if (_js != null)
        {
            await _js.InvokeVoidAsync("toggleDarkMode");
            StateHasChanged();
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_js is not null)
        {
            try
            {
                await _js.DisposeAsync();
                _js = null;
            }
            catch (JSDisconnectedException)
            {
                // We do not want to see this in logs, DisposeAsync call also throws exception if circuit lost
                // https://github.com/dotnet/aspnetcore/issues/44180
            }
        }
    }
}
