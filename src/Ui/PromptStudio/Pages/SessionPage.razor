@page "/session/{SessionId:guid}"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ISender Sender
@inject IConnectionMultiplexer Connection
@inject IContextCreator<Article> ArticleContextCreator

@if (_session == null)
{
    <PageTitle>Loading...</PageTitle>
    <div class="w-5/6 mt-8 items-center justify-center">
    <p class="text-center text-sky-600">Loading...</p>
</div>
}
else
{
    <PageTitle>Session @_session.Title</PageTitle>

    <div class="xl:flex">
        <div class="xl:w-1/2 xl:mt-4 xl:ml-4">
            <div class="xl:w-full xl:flex">
                <label for="title" class="xl:w-48">Title</label>
                <input id="title" class="xl:ml-2" type="text" @bind="_title" />
                <button class="submitButton xl:w-8" @onclick="SaveTitle">
                    <Icon Name="save2" Padding="2" Size="14" />
                </button>
            </div>
            <div class="xl:w-full xl:flex xl:mt-2">
                <label for="entityName" class="xl:w-48">EntityName</label>
                <input id="entityName" class="xl:ml-2" type="text" @bind="_entityName" />
                <button class="submitButton xl:w-8" @onclick="SaveEntityName">
                    <Icon Name="save2" Padding="2" Size="14" />
                </button>
            </div>

            <div class="xl:w-full xl:flex xl:mt-2">
                <label for="temperature" class="xl:w-48">Temperature</label>
                <input id="temperature" class="xl:ml-2" type="number" step="0.1" @bind="_temperature" />
                <button class="submitButton xl:w-8" @onclick="SaveTemperature">
                    <Icon Name="save2" Padding="2" Size="14" />
                </button>
            </div>

            <div class="xl:w-full xl:flex xl:mt-2">
                <label for="entityName" class="xl:w-48"># Tokens to predict</label>
                <input id="entityName" class="xl:ml-2" type="number" step="1" min="1" max="32768"
                    @bind="_numberOfTokensToPredict" />
                <button class="submitButton xl:w-8" @onclick="SaveNumberOfTokensToPredict">
                    <Icon Name="save2" Padding="2" Size="14" />
                </button>
            </div>

            <div class="xl:w-full xl:mt-2">
                <div class="container">
                    <label for="systemInstructions">System instructions</label>
                </div>
                <div class="container">
                    <textarea id="systemInstructions" cols="@_cols" rows="@_rows" @bind="_systemInstructions"></textarea>
                </div>
                <button class="submitButton xl:w-1/2" @onclick="SaveSystemInstructions">
                    <Icon Name="save2" Padding="2" Size="18" />
                </button>
            </div>

            <div class="xl:w-full xl:mt-2">
                <div class="container">
                    <label for="context">Context @(_contextTokenCount != 0 ? $"Token count: {_contextTokenCount}" :
                    "")</label>
                </div>
                @if (!string.IsNullOrEmpty(_articleIdError))
                {
                    <div class="container">
                        <p class="text-red-600">@_articleIdError</p>
                    </div>
                }
                <div class="flex">
                    <label for="articleId" class="xl:w-48">Article Id</label>
                    <input id="articleId" class="xl:w-96 xl:ml-2" type="text" @bind="_articleId" />
                    <button class="submitButton xl:w-24 xl:ml-2" @onclick="FetchArticle">
                        Fetch
                    </button>
                </div>
                <div class="container xl:mt-2">
                    <textarea id="context" cols="@_cols" rows="@_rows" @bind="_context"></textarea>
                </div>
                <button class="submitButton xl:w-1/4" aria-label="save context as default" @onclick="SaveContext">
                    <Icon Name="save2" Padding="2" Size="18" />
                </button>
                <button class="submitButton xl:w-1/4" aria-label="tokenize context" @onclick="TokenizeContext">
                    <Icon Name="calculator" Padding="2" Size="18" />
                </button>
            </div>

            <div class="xl:w-full xl:mt-2">
                @if (_isRunOngoing)
                {
                    <button class="xl:w-32 xl:h-9 submitButton" @onclick="Run" disabled>Create run</button>
                }
                else
                {
                    <button class="xl:w-32 xl:h-9 submitButton" @onclick="Run">Create run</button>
                }
            </div>

            @if (_errors.Count > 0)
            {
                <div class="xl:w-1/2 xl:mt-2">
                    @foreach (var error in _errors)
                    {
                        <p class="text-red-600">@error</p>
                    }
                </div>
            }
            <div class="xl:w-1/2 xl:mt-2">
                <div class="container">
                    @if (_activeRunId != Guid.Empty)
                    {
                        <label for="context">Output of @_activeRunId @(_isRunOngoing ? "...running..." : "")</label>
                    }
                    else
                    {
                        <label for="context">Output</label>
                    }
                </div>
                <div class="container">
                    <textarea id="output" cols="@_cols" rows="@_rows" @bind="_output" disabled></textarea>
                </div>
            </div>
        </div>

        <div class="xl:w-1/2">
            <RunListView SessionId="@SessionId" />
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid SessionId { get; set; }

    private readonly PromptStudioIndex _index = new PromptStudioIndex();

    private PromptStudioSession? _session;
    private bool _isRunOngoing = false;
    private int _cols = 80;
    private int _rows = 8;
    private string _title = string.Empty;
    private string _entityName = "assistant";
    private double _temperature = 0.8;
    private int _numberOfTokensToPredict = 2048;
    private string _systemInstructions = string.Empty;
    private string _articleId = string.Empty;
    private string _articleIdError = string.Empty;
    private string _context = string.Empty;
    private int _contextTokenCount = 0;
    private string _output = string.Empty;
    private List<string> _errors = new List<string>();
    private Guid _activeRunId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        // sub to msg's
        var pubsub = Connection.GetSubscriber();
        await pubsub.SubscribeAsync(_index.Channel, OnMessage);

        // adjust textareas according to window size
        var windowWidth = await JSRuntime.InvokeAsync<int>("eval", "window.innerWidth");
        _cols = (int)Math.Round(windowWidth / 22.0);
        _cols = _cols < 80 ? 80 : _cols; // adjust if making mobile friendly version
        var windowHeight = await JSRuntime.InvokeAsync<int>("eval", "window.innerHeight");
        _rows = (int)Math.Round(windowHeight / 120.0);
        _rows = _rows < 8 ? 8 : _rows; // adjust if making mobile friendly version

        // refresh (load session data)
        await Refresh();
    }

    private void OnMessage(RedisChannel channel, RedisValue message)
    {
        if (message.HasValue)
        {
            var msg = JsonSerializer.Deserialize<PromptStudioEvent>(message.ToString());
            var tokenEvent = msg as PromptStudioRunTokenEvent;
            // tokens on new run
            if (tokenEvent != null && tokenEvent.RunId == _activeRunId)
            {
                _output += tokenEvent.Token;
                InvokeAsync(StateHasChanged);
            }
            // title
            var titleEvent = msg as PromptStudioTitleUpdatedEvent;
            if (titleEvent != null && titleEvent.SessionId == SessionId && _title != titleEvent.Title)
            {
                _title = titleEvent.Title;
                InvokeAsync(StateHasChanged);
            }
            // temperature
            var temperatureEvent = msg as PromptStudioTemperatureUpdatedEvent;
            if (temperatureEvent != null && temperatureEvent.SessionId == SessionId && _temperature != temperatureEvent.Temperature)
            {
                _temperature = temperatureEvent.Temperature;
                InvokeAsync(StateHasChanged);
            }
            // number of tokens
            var numberOfTokensEvent = msg as PromptStudioNumberOfTokensToPredictUpdatedEvent;
            if (numberOfTokensEvent != null && numberOfTokensEvent.SessionId == SessionId && _numberOfTokensToPredict !=
            numberOfTokensEvent.NumberOfTokensToPredict)
            {
                _numberOfTokensToPredict = numberOfTokensEvent.NumberOfTokensToPredict;
                InvokeAsync(StateHasChanged);
            }
            // entity name
            var entityNameEvent = msg as PromptStudioEntityNameUpdatedEvent;
            if (entityNameEvent != null && entityNameEvent.SessionId == SessionId && _entityName != entityNameEvent.EntityName)
            {
                _entityName = entityNameEvent.EntityName;
                InvokeAsync(StateHasChanged);
            }
            // system instructions
            var systemInstructionsEvent = msg as PropmtStudioSystemInstructionsUpdatedEvent;
            if (systemInstructionsEvent != null && systemInstructionsEvent.SessionId == SessionId)
            {
                var eList = new EquatableList<string>(_systemInstructions.Split("\n").ToArray());
                if (eList != systemInstructionsEvent.SystemInstructions)
                {
                    _systemInstructions = string.Join("\n", systemInstructionsEvent.SystemInstructions);
                    InvokeAsync(StateHasChanged);
                }
            }
            // context
            var contextEvent = msg as PromptStudioContextUpdatedEvent;
            if (contextEvent != null && contextEvent.SessionId == SessionId && _context != contextEvent.Context)
            {
                _context = contextEvent.Context;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task SaveTitle()
    {
        await Sender.Send(new PromptStudioUpdateTitleCommand { SessionId = SessionId, Title = _title }, CancellationToken.None);
    }

    private async Task SaveTemperature()
    {
        await Sender.Send(new PromptStudioUpdateTemperatureCommand { SessionId = SessionId, Temperature = _temperature },
        CancellationToken.None);
    }

    private async Task SaveNumberOfTokensToPredict()
    {
        await Sender.Send(new PromptStudioUpdateNumberOfTokensToPredictCommand
            {
                SessionId = SessionId,
                NumberOfTokensToPredict
            = _numberOfTokensToPredict
            }, CancellationToken.None);
    }

    private async Task SaveEntityName()
    {
        await Sender.Send(new PromptStudioUpdateEntityNameCommand { SessionId = SessionId, EntityName = _entityName },
        CancellationToken.None);
    }

    private async Task SaveSystemInstructions()
    {
        var eList = new EquatableList<string>(_systemInstructions.Split("\n").ToArray());
        await Sender.Send(new PromptStudioUpdateSystemInstructionsCommand { SessionId = SessionId, SystemInstructions = eList },
        CancellationToken.None);
    }

    private async Task SaveContext()
    {
        await Sender.Send(new PromptStudioUpdateContextCommand { SessionId = SessionId, Context = _context },
        CancellationToken.None);
    }

    private async Task TokenizeContext()
    {
        var response = await Sender.Send(new TokenizeContentQuery { Content = _context }, CancellationToken.None);
        _contextTokenCount = response.Tokens.Length;
        StateHasChanged();
    }

    private async Task Refresh()
    {
        // using delays to present what is happening to the user
        await Task.Delay(TimeSpan.FromMilliseconds(200));
        _session = await Sender.Send(new PromptStudioGetSessionQuery { SessionId = SessionId });
        _title = _session.Title;
        _temperature = _session.Temperature;
        _numberOfTokensToPredict = _session.NumberOfTokensToPredict;
        _entityName = _session.EntityName;
        _systemInstructions = string.Join("\n", _session.SystemInstructions);
        _context = _session.Context;
        StateHasChanged();
    }

    private async Task Run()
    {
        // validate form
        _articleIdError = string.Empty;
        _errors.Clear();
        if (string.IsNullOrEmpty(_entityName))
            _errors.Add("EntityName is required");
        if (string.IsNullOrEmpty(_systemInstructions))
            _errors.Add("System instructions is required");
        if (string.IsNullOrEmpty(_context))
            _errors.Add("Context is required");
        if (_errors.Count > 0)
        {
            StateHasChanged();
            return;
        }

        // reset and pick new run id
        _activeRunId = Guid.NewGuid();
        _isRunOngoing = true;
        _output = string.Empty;
        StateHasChanged();

        var systemInstructions = _systemInstructions.Split("\n").ToArray();
        var completedEvent = await Sender.Send(new PromptStudioRunCommand
            {
                SessionId = SessionId,
                RunId = _activeRunId,
                EntityName = _entityName,
                SystemInstructions = systemInstructions,
                Context = _context,
                Temperature = _temperature,
                NumberOfTokensToPredict = _numberOfTokensToPredict
            }, CancellationToken.None);

        _isRunOngoing = false;
        StateHasChanged();
    }

    private async Task FetchArticle()
    {
        _articleIdError = string.Empty;
        if (Guid.TryParseExact(_articleId, "D", out var articleId))
        {
            var article = await Sender.Send(new ArticleGetByIdQuery { Id = articleId }, CancellationToken.None);
            _context = ArticleContextCreator.Create(article);
        }
        else
        {
            _articleIdError = "Invalid article id";
            StateHasChanged();
        }
    }
}