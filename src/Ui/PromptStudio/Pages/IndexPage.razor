@page "/"
@inject ISender Sender
@inject IConnectionMultiplexer Connection

<PageTitle>PromptStudio</PageTitle>

<div class="container m-auto mt-8 flex justify-center items-center">
    <NavLink href="/start" aria-label="chat">
        <button class="menuButton p-2" aria-label="home">
            <div class="flex">
                <Icon Name="database-add" Size="48" />
                <span class="ml-2 mt-2">Start new session</span>
            </div>
        </button>
    </NavLink>
</div>

@foreach (var session in _sessions.Items)
{
    var sessionUri = $"/session/{session.SessionId}";

    <NavLink href="@sessionUri">
        @session.SessionId
    </NavLink>
}

@code {
    private readonly PromptStudioIndex _index = new PromptStudioIndex();
    private PaginatedList<PromptStudioSessionHeader> _sessions =
         new PaginatedList<PromptStudioSessionHeader>(new List<PromptStudioSessionHeader>(), 0, 0);

    private void OnMessage(RedisChannel channel, RedisValue message)
    {
        if (message.HasValue)
        {
            var msg = JsonSerializer.Deserialize<PromptStudioEvent>(message.ToString());
            var startEvent = msg as PromptStudioStartEvent;
            if (startEvent != null && !startEvent.IsTest)
            {
                InvokeAsync(Refresh);
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var pubsub = Connection.GetSubscriber();
        await pubsub.SubscribeAsync(_index.Channel, OnMessage);
        await Refresh();
    }

    private async Task Refresh()
    {
        // using delays to present what is happening to the user
        await Task.Delay(TimeSpan.FromMilliseconds(200));
        _sessions = await Sender.Send(new PromptStudioGetManySessionHeadersQuery { Offset = 0, PageSize = 100 });
        StateHasChanged();
    }
}