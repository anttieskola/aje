@inject IJSRuntime JS

@if (AiChatInteractionEntry != null)
{
    <div class="border-solid m-2 border-2 border-t-2 border-y-0 rounded-lg border-sky-600 p-2">
    <div class="flex sm:flex-row">
        <div class="text-xs w-2/6">@AiChatInteractionEntry.InteractionTimestamp.ToString("yyyy-MM-dd hh:mm")</div>
        <div class="text-xs w-2/6">@AiChatInteractionEntry.InteractionId</div>
        <div class="text-xs w-2/6">@ModelName()</div>
    </div>
    <div>
        <div class="container w-11/12 mt-2 p-2 rounded-lg rounded-bl-none bg-slate-800 ">
            <textarea id="@(GenerateInputId())" class="ml-1 w-full text-sm" spellcheck="false" disabled rows="6"
                cols="50">@AiChatInteractionEntry.Input</textarea>
        </div>
    </div>

    <div class="flex justify-end">
        <div class="container w-11/12 mt-2 p-2 rounded-lg rounded-br-none bg-slate-800">
            <textarea id="@GenerateOutputId()" class="mr-1 w-full text-sm" spellcheck="false" disabled
                cols="@_outputCols" rows="@_outputRows">@AiChatInteractionEntry.Output</textarea>
        </div>
    </div>
</div>
}
else
{
    <p class="text-red-500">null</p>
}

@code {

    [Parameter]
    public AiChatInteractionEntry? AiChatInteractionEntry { get; set; }

    int _outputRows = 2;
    int _outputCols = 50;

    string GenerateInputId()
    {
        return $"input_{AiChatInteractionEntry?.InteractionId.ToString()}" ?? string.Empty;
    }
    string GenerateOutputId()
    {
        return $"output_{AiChatInteractionEntry?.InteractionId.ToString()}" ?? string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (JS == null || AiChatInteractionEntry == null)
            return;

        int? windowWidth = await JS.InvokeAsync<int>("eval", "window.innerWidth");
        if (windowWidth.HasValue)
        {
            _outputRows = CalculateRows(AiChatInteractionEntry.Output, windowWidth.Value);
            StateHasChanged();
        }
    }

    int CalculateRows(string text, int windowWidth)
    {
        if (string.IsNullOrWhiteSpace(text))
            return 1;

        // letter width with current settings is around 7...10px
        // width of textare is ~90% of window width on small screens
        // larger screens get bigger margins
        var columns = (int)((double)windowWidth * 0.90 / 8.5);
        var rows = text.Length / columns;
        // add line feeds
        var lineFeeds = text.Count(c => c == '\n');
        rows += lineFeeds;
        // fine tuning
        if (windowWidth < 600)
        {
            // small screen
            if (rows < 5)
                rows += 2;
            else if (rows < 20)
                rows += 3;
            else if (rows < 30)
                rows += 4;
            else
                rows += 5;
        }
        else
        {
            // large screen
            if (rows < 20)
                rows += 2;
        }
        return rows == 0 ? 1 : rows;
    }


    private string ModelName()
    {
        return AiChatInteractionEntry != null ? Path.GetFileNameWithoutExtension(AiChatInteractionEntry.Model) : string.Empty;
    }
}
