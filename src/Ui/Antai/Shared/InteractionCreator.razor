@inject IJSRuntime JSRuntime
@inject ISender Sender
@inject IConnectionMultiplexer Connection

<div class="container w-9/12 m-1 p-2 rounded-lg rounded-bl-none bg-slate-800 ">
    <div class="container">
        @if (_inputError != null)
        {
            <div class="text-red-500">@_inputError</div>
        }
    </div>
    <div class="flex m-1">
        @if (_inputDisabled)
        {
            <textarea id="disabledInput" class="ml-1 w-full text-sm" spellcheck="false" disabled aria-label="input"
                @bind="_input" rows="@_inputRows">@_input </textarea>
        }
        else
        {
            <textarea id="input" tabindex="0" class="ml-1 w-full text-sm" spellcheck="false" aria-label="input"
                @bind="_input" @onkeydown="OnKeyDown" placeholder="Type your message here"
                rows="@_inputRows">@_input</textarea>

            <button class="submitButton" @onclick="InputSubmit" aria-label="submit">
                <Icon Name="arrow-return-left" Padding="2" Size="26" />
            </button>
        }
    </div>
</div>

@if (_output == null && _inputDisabled)
{
    <div class="container items-center text-center">
        <p class="text-green-300">.............</p>
    </div>
}
else if (_output != null)
{
    <div class="flex justify-end m-1">
        <div class="container w-11/12 m-1 p-2 rounded-lg rounded-br-none bg-slate-800">
            <textarea id="output" class="mr-1 w-full text-sm" spellcheck="false" disabled aria-label="output"
                rows="@_outputRows">@_output</textarea>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid ChatId { get; set; }

    private IRedisIndex _index = new AiChatIndex();
    private string? _input;
    private string? _inputError;
    private bool _inputDisabled = false;
    private string? _output;
    private int _inputRows = 1;
    private int _outputRows = 1;

    protected override async Task OnInitializedAsync()
    {
        var pubsub = Connection.GetSubscriber();
        await pubsub.SubscribeAsync(_index.Channel, OnMessage);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 999999);
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('input').focus();");
        }
        await CalculateRows();
    }

    void OnMessage(RedisChannel channel, RedisValue message)
    {
        // TODO: This will write to output on all browsers that have chat open
        // were it is not send, the text outputs into previous output
        if (message.HasValue)
        {
            var msg = JsonSerializer.Deserialize<AiChatEvent>(message.ToString());
            if (msg != null && msg is AiChatTokenEvent tokenEvent && !tokenEvent.IsTest && tokenEvent.ChatId == ChatId)
            {
                InvokeAsync(async () =>
                {
                    _output += tokenEvent.Token;
                    StateHasChanged();
                    await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 999999);
                });
            }
        }
    }

    async Task InputSubmit()
    {
        if (string.IsNullOrWhiteSpace(_input))
        {
            _inputError = "Input cannot be empty";
            return;
        }
        _inputError = null;
        _inputDisabled = true;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 999999);
        await Task.Delay(TimeSpan.FromMilliseconds(500));
        await Sender.Send(new AiChatSendMessageCommand
            {
                ChatId = ChatId,
                Message = _input,
            });
        await Task.Delay(TimeSpan.FromMilliseconds(200));
        await InvokeAsync(Reset);
    }

    async Task Reset()
    {
        // artificial delay
        // TODO: some animation would be nice
        await Task.Delay(TimeSpan.FromMilliseconds(200));
        _inputError = null;
        _input = null;
        _output = null;
        _inputDisabled = false;
        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 999999);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('input').focus();");
    }

    // TODO: Keyevents should be send using SignalR (redis channels) to all browsers that have chat open
    async Task OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == null
        || args.CtrlKey
        || args.Key == "Control"
        || args.Key == "Shift"
        || args.Key == "Alt")
            return;

        if (args.Key == "Enter")
            await InputSubmit();

        if (args.Key == "Backspace")
        {
            if (_input?.Length > 0)
            {
                _input = _input.Substring(0, _input.Length - 1);
                StateHasChanged();
            }
        }
        else if (args.Key == "Delete")
        {
            _input = "";
            StateHasChanged();
        }
        else if (args.Key.Length == 1)
        {
            var c = args.Key[0];
            if (IsCharAllowed(c))
            {
                _input += c;
                StateHasChanged();
            }
        }
    }

    bool IsCharAllowed(char c)
    {
        return char.IsLetterOrDigit(c)
        || c == ' '
        || c == '.'
        || c == ','
        || c == '?'
        || c == '!'
        || c == ':'
        || c == ')'
        || c == '('
        || c == '#'
        || c == '\'';
    }

    // TODO: Similar code with InteractionView.razor
    async Task CalculateRows()
    {
        var windowWidth = await JSRuntime.InvokeAsync<int>("eval", "window.innerWidth");
        if (!_inputDisabled)
            _inputRows = CalculateRows(_input ?? string.Empty, windowWidth);
        _outputRows = CalculateRows(_output ?? string.Empty, windowWidth);
    }

    int CalculateRows(string text, int windowWidth)
    {
        if (string.IsNullOrWhiteSpace(text))
            return 1;

        // letter width with current settings is around 7...10px
        // width of textare is around 80% of window width
        var columns = (int)(windowWidth * 0.8 / 10);
        var rows = text.Length / columns;
        // add line feeds
        var lineFeeds = text.Count(c => c == '\n');
        rows += lineFeeds;
        // fine tuning
        if (windowWidth < 600)
        {
            // small screen
            if (rows < 5)
                rows += 2;
            else if (rows < 20)
                rows += 3;
            else if (rows < 30)
                rows += 4;
            else
                rows += 5;
        }
        else
        {
            // large screen
            if (rows < 20)
                rows += 2;
        }
        return rows == 0 ? 1 : rows;
    }
}