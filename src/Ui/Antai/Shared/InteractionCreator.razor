@inject IJSRuntime JS
@inject ISender Sender
@implements IAsyncDisposable

<div class="container w-5/6 m-1 p-2 rounded-lg rounded-bl-none bg-slate-800 ">
    <div class="container">
        @if (_inputError != null)
        {
            <div class="text-red-500">@_inputError</div>
        }
    </div>
    <div class="flex">
        @if (_inputDisabled)
        {
            <textarea id="disabledInput" class="ml-1 w-full text-sm" spellcheck="false" disabled aria-label="input"
                @bind="_input" @onkeydown="InputKeyDown"
                rows="@(_input != null ? CalculateRows(_input) : 1)">@_input </textarea>
        }
        else
        {
            <textarea id="input" tabindex="0" class="ml-1 w-full text-sm" spellcheck="false" aria-label="input"
                @bind="_input" @onkeydown="InputKeyDown" placeholder="Type your message here"
                rows="@(_input != null ? CalculateRows(_input) : 1)">@_input</textarea>

            <button class="submitButton" @onclick="InputSubmit" aria-label="submit">
                <Icon Name="arrow-return-left" Padding="2" Size="26" />
            </button>
        }
    </div>
</div>

@if (_output != null)
{
    <div class="flex justify-end">
    <div class="container w-5/6 m-1 p-2 rounded-lg rounded-br-none bg-slate-800">
        <textarea id="output" class="mr-1 w-full text-sm" spellcheck="false" disabled aria-label="output"
            rows="@(_output != null ? CalculateRows(_output) : 1)">@_output</textarea>
    </div>
</div>
}

@code {
    [Parameter]
    public Guid ChatId { get; set; }

    private string? _input;
    private string? _inputError;
    private bool _inputDisabled = false;
    private string? _output;
    private IJSObjectReference? _js;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _js = await JS.InvokeAsync<IJSObjectReference>("import", "./Shared/InteractionCreator.razor.js");
            await _js.InvokeVoidAsync("focusElement", "input");
        }
    }

    private async Task TokenCreatedCallback(string token)
    {
        _output += token;
        StateHasChanged();
        if (_js != null)
            await _js.InvokeVoidAsync("focusElement", "output");
    }

    private async Task InputSubmit()
    {
        if (string.IsNullOrWhiteSpace(_input))
        {
            _inputError = "Input cannot be empty";
            return;
        }
        _inputError = null;
        _inputDisabled = true;
        StateHasChanged();
        await Sender.Send(new SendAiChatMessageCommand
            {
                ChatId = ChatId,
                Message = _input,
                TokenCreatedCallback = TokenCreatedCallback
            });
        await InvokeAsync(Reset);
    }

    private async Task Reset()
    {
        // artificial delay
        // TODO: some animation would be nice
        await Task.Delay(TimeSpan.FromMilliseconds(200));
        _inputError = null;
        _input = null;
        _output = null;
        _inputDisabled = false;
        StateHasChanged();

        if (_js is not null)
            await _js.InvokeVoidAsync("focusElement", "input");
    }

    private async Task InputKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == null
        || args.CtrlKey
        || args.Key == "Control"
        || args.Key == "Shift"
        || args.Key == "Alt")
            return;

        if (args.Key == "Enter")
            await InputSubmit();

        if (args.Key == "Backspace")
        {
            if (_input?.Length > 0)
            {
                _input = _input.Substring(0, _input.Length - 1);
                StateHasChanged();
            }
        }
        else if (args.Key == "Delete")
        {
            _input = "";
            StateHasChanged();
        }
        else if (args.Key.Length == 1)
        {
            var c = args.Key[0];
            if (IsCharAllowed(c))
            {
                _input += c;
                StateHasChanged();
            }
        }
    }

    private bool IsCharAllowed(char c)
    {
        return char.IsLetterOrDigit(c)
        || c == ' '
        || c == '.'
        || c == ','
        || c == '?'
        || c == '!'
        || c == ':'
        || c == ')'
        || c == '('
        || c == '#'
        || c == '\'';
    }

    private int CalculateRows(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return 1;

        return text.Length / 100;
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_js is not null)
        {
            await _js.DisposeAsync();
        }
    }
}
