@page "/chat/{ChatId:guid}"
@inject NavigationManager NavigationManager
@inject ISender Sender
@inject IAiChatEventHandler AiChatEventHandler
@implements IDisposable

<PageTitle>Antai - Chat - @ChatId</PageTitle>

@if (_chat == null)
{
    <p>Loading...</p>
}
else
{
    <div class="container sm:flex flex-col md:flex-row">
    <div class="container text-center mt-1 sm:w-full lg:w-1/3">
        <div class="flex items-center">
            <label for="id" class="w-1/5 text-xs">Id</label>
            <textarea id="id" class="w-4/5 text-xs" rows="1" readonly>@_chat.ChatId</textarea>
        </div>
    </div>
    <div class="container text-center mt-1 sm:w-full lg:w-1/3">
        <div class="flex items-center">
            <label for="id" class="w-1/4 text-xs">Start</label>
            <textarea id="id" class="w-3/4 text-xs" rows="1" cols="17"
                readonly>@_chat.StartTimestamp.ToString("yyyy-MM-dd hh:mm")</textarea>
        </div>
    </div>
    <div class="container text-center mt-1 sm:w-full lg:w-1/3">
        <div class="flex items-center">
            <label for="context" class="text-xs">Context (placeholder)</label>
            <progress id="context" max="100" value="45">45%</progress>
        </div>
    </div>
</div>

    @foreach (var interaction in _chat.Interactions)
    {
        <InteractionView AiChatInteractionEntry="@interaction" />
    }

    <InteractionCreator ChatId="_chat.ChatId" />
}

@code {

    [Parameter]
    public Guid ChatId { get; set; }

    private AiChat? _chat;
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        AiChatEventHandler.Subscribe(ChatId, OnAiChatEvent);
    }

    private void OnAiChatEvent(AiChatEvent aiChatEvent)
    {
        InvokeAsync(Refresh);
    }

    private async Task Refresh()
    {
        _chat = await Sender.Send(new GetAiChatQuery { Id = ChatId });
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        AiChatEventHandler.Unsubscribe(OnAiChatEvent);
    }
}
