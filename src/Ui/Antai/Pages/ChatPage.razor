@page "/chat/{ChatId:guid}"
@inject NavigationManager NavigationManager
@inject ISender Sender
@inject IConnectionMultiplexer Connection

<PageTitle>Antai - Chat - @ChatId</PageTitle>

@if (_chat == null)
{
    <p>Loading...</p>
}
else
{
    <div class="fixed top-0 left-1 right-1 mt-[2px] flex w-screen bg-green-950/70 dark:bg-black/70">
    <div class="container xs:flex-row lg:flex">
        <div class="container text-center mt-1 xs:w-full lg:w-1/3">
            <div class="flex items-center">
                <label for="id" class="w-1/5 text-xs">Id</label>
                <textarea id="id" class="w-4/5 text-xs" rows="1" cols="37" readonly>@_chat.ChatId</textarea>
            </div>
        </div>
        <div class="container text-center mt-1 xs:w-full lg:w-1/3">
            <div class="flex items-center">
                <label for="id" class="w-1/5 text-xs">Start</label>
                <textarea id="id" class="w-4/5 text-xs" rows="1" cols="17"
                    readonly>@_chat.StartTimestamp.ToString("yyyy-MM-dd hh:mm")</textarea>
            </div>
        </div>
        <div class="container text-center mt-1 xs:w-full lg:w-1/3">
            <div class="flex items-center">
                <ContextView AiChatInteractionEntry="@_lastInteraction" />
            </div>
        </div>
    </div>
</div>
    <div class="lg:mt-[30px] xs:mt-[68px]">
    @foreach (var interaction in _chat.Interactions)
        {
            <InteractionView AiChatInteractionEntry="@interaction" />
        }
    </div>
    <div class="content lg:margin-auto xs:fixed xs:bottom-[20px} xs:left-[6px]">
    <InteractionCreator ChatId="_chat.ChatId" />
</div>
}


@code {

    [Parameter]
    public Guid ChatId { get; set; }

    private IRedisIndex _index = new AiChatIndex();
    private AiChat? _chat;

    private AiChatInteractionEntry? _lastInteraction
    {
        get
        {
            if (_chat != null && _chat.Interactions.Count > 0)
                return _chat.Interactions.Last();
            return null;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var pubsub = Connection.GetSubscriber();
        await pubsub.SubscribeAsync(_index.Channel, OnMessage);
        await Refresh();
    }

    private void OnMessage(RedisChannel channel, RedisValue message)
    {
        if (message.HasValue)
        {
            // todo: test this works (as removed type from event fields)
            var msg = JsonSerializer.Deserialize<AiChatEvent>(message.ToString());
            if (msg != null
            && msg is AiChatInteractionEvent interactionEvent
            && !interactionEvent.IsTest
            && interactionEvent.ChatId == ChatId)
            {
                InvokeAsync(async () =>
                {
                    await Refresh();
                });
            }
        }
    }

    private async Task OnAiChatEvent(AiChatEvent aiChatEvent)
    {
        await InvokeAsync(Refresh);
    }

    private async Task Refresh()
    {
        _chat = await Sender.Send(new GetAiChatQuery { Id = ChatId });
        StateHasChanged();
    }
}
