@inject IJSRuntime JSRuntime

<div class="fixed top-0 right-0 lg:mt-8 lg:mr-8 md:mt-4 md:mr-4 xs:mt-1 xs:mr-1">
    <nav>
        <button type="button" class="submitButton" aria-label="go back" @onclick="GoBack">
            <Icon Name="arrow-90deg-left" Size="24" Padding="0" />
        </button>
    </nav>
</div>

@if (Model == null)
{
    <p class="text-rose-600">null</p>
}
else
{
    <div class="xl:w-3/4 lg:w-4/5 md:w-5/6 xs:w-full xl:m-10 lg:m-6 md:m-4 xs:m-1">
    @foreach (var content in Model.Content)
        {
            switch (content)
            {
                case MarkdownHeaderElement header:
                    <MarkDownHeader Element="@header" />
                    break;
                case MarkdownTextElement text:
                    <MarkDownText Element="@text" />
                    break;
                default:
                    <p class="text-rose-600">Unknown content type</p>
                    break;
            }
        }
    </div>
    <p class="italic text-center text-xs mt-2">published @Published</p>
    <p class="italic text-center text-xs mt-2"><a target="_blank" href="@Model.Source">source</a></p>
    <div class="flex flex-col items-center justify-center mt-3">
        <nav>
            <button type="button" class="submitButton" aria-label="go back" @onclick="GoBack">
                <Icon Name="arrow-90deg-left" Size="24" Padding="0" />
            </button>
        </nav>
    </div>
}



@code {

    [Parameter]
    public Article? Model { get; set; }

    private DateTimeOffset Published
    {
        get
        {
            if (Model == null)
            {
                return DateTimeOffset.MinValue;
            }
            else
            {
                return new DateTimeOffset(new DateTime(Model.Modified, DateTimeKind.Utc));
            }
        }
    }

    // Using JS API to go back we save our query string
    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

}
