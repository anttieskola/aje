@inject IJSRuntime JSRuntime

<div class="fixed top-0 right-0 lg:mt-8 lg:mr-8 md:mt-4 md:mr-4 xs:mt-1 xs:mr-1">
    <nav>
        <button type="button" class="submitButton" aria-label="go back" @onclick="GoBack">
            <Icon Name="arrow-90deg-left" Size="24" Padding="0" />
        </button>
    </nav>
</div>

@if (Model == null)
{
    <p class="text-rose-600">null</p>
}
else
{
    if (Model.IsLiveNews)
    {
        <div class="italic text-center text-xs xl:mt-4 md:mt-2 xs:mt-1">
            live article...
        </div>
    }

    <div class="float-left">
        <SentimentIcon Polarity="@Model.Polarity" IconSize="30" IconPadding="0" />
    </div>

    <div class="xl:w-3/4 lg:w-4/5 md:w-5/6 xs:w-full xl:m-10 xl:ml-14 lg:m-6 lg:ml-12 md:m-4 md:ml-10 xs:ml-10">
        @if (HasPositiveThings)
        {
            <button class="p-1 border-2 rounded border-lime-600" @onclick="TogglePositiveThings">@(_showPositiveThings ? "Hide positive" : "Show positive")</button>
        }
        @if (HasKeyPeople)
        {
            <button class="ml-1 p-1 border-2 rounded border-pink-600" @onclick="ToggleKeyPeople">@(_showKeyPeople ? "Hide key people" : "Show key people")</button>
        }
        @if (HasSummary)
        {
            <button class="ml-1 p-1 border-2 rounded border-sky-600" @onclick="ToggleSummary">@(_showSummary ? "Hide summary" : "Show summary")</button>
        }
    </div>

    <div class="xl:w-3/4 lg:w-4/5 md:w-5/6 xs:w-full xl:m-10 xl:ml-14 lg:m-6 lg:ml-12 md:m-4 md:ml-10 xs:m-1">
        <div class="@(_showPositiveThings ? "border-lime-600 border-b-2 border-t-2" : "hidden")">
            @foreach (var positiveThing in Model.Analysis.PositiveThings)
            {
                <div class="container m-1">
                    <h6>@positiveThing.Title</h6>
                    <p class="text-xs">@positiveThing.Description</p>
                </div>
            }
        </div>
    </div>

    <div class="xl:w-3/4 lg:w-4/5 md:w-5/6 xs:w-full xl:m-10 xl:ml-14 lg:m-6 lg:ml-12 md:m-4 md:ml-10 xs:m-1">
        <div class="@(_showKeyPeople ? "border-pink-600 border-b-2 border-t-2" : "hidden")">
            @foreach (var keyPerson in Model.Analysis.KeyPeople)
            {
                <div class="container m-1">
                    <h6>@keyPerson.Name - @keyPerson.Role</h6>
                    <p class="text-xs">@keyPerson.Intention</p>
                </div>
            }
        </div>
    </div>

    <div class="xl:w-3/4 lg:w-4/5 md:w-5/6 xs:w-full xl:m-10 xl:ml-14 lg:m-6 lg:ml-12 md:m-4 md:ml-10 xs:m-1">
        <div class="@(_showSummary ? "border-sky-600 border-b-2 border-t-2" : "hidden")">
            <pre class="text-sm">
                @PreRender(Model.Analysis.Summary)
            </pre>
        </div>
    </div>

    <div class="xl:w-3/4 lg:w-4/5 md:w-5/6 xs:w-full xl:m-10 xl:ml-14 lg:m-6 lg:ml-12 md:m-4 md:ml-10 xs:m-1">

        <h1 class="text-center justify-center">@Model.Title</h1>

        @foreach (var content in Model.Content)
        {
            switch (content)
            {
                case MarkdownHeaderElement header:
                    if (header.Text.Trim() == Model.Title.Trim())
                    {
                        continue;
                    }
                    <MarkDownHeader Element="@header" />
                    break;
                case MarkdownTextElement text:
                    <MarkDownText Element="@text" />
                    break;
                default:
                    <p class="text-rose-600">Unknown content type</p>
                    break;
            }
        }
    </div>
    <p class="italic text-center text-xs mt-2">published @Published.ToBestString()</p>
    <p class="italic text-center text-xs mt-2"><a target="_blank" href="@Model.Source">source</a></p>
    <div class="flex flex-col items-center justify-center mt-3">
        <nav>
            <button type="button" class="submitButton" aria-label="go back" @onclick="GoBack">
                <Icon Name="arrow-90deg-left" Size="24" Padding="0" />
            </button>
        </nav>
    </div>

    @if (Model.Links.Count > 0 )
    {
        <div class="xl:w-3/4 lg:w-4/5 md:w-5/6 xs:w-full xl:m-10 xl:ml-14 lg:m-6 lg:ml-12 md:m-4 md:ml-10 xs:ml-10">
            <h4>Links</h4>
            <ul>
                @foreach(var link in Model.Links)
                {
                    <li><a href="@link.Url" target="_blank">@link.Name</a></li>
                }
            </ul>
        </div>
    }

    @if(Model.Persons.Count > 0)
    {
        <div class="xl:w-3/4 lg:w-4/5 md:w-5/6 xs:w-full xl:m-10 xl:ml-14 lg:m-6 lg:ml-12 md:m-4 md:ml-10 xs:ml-10">
            <h4>Persons</h4>
            <ul>
                @foreach(var person in Model.Persons)
                {
                    <li>@person.Name</li>
                }
            </ul>
        </div>
    }

    @if(Model.IsValidForAnalysis)
    {
        <div class="xl:w-3/4 lg:w-4/5 md:w-5/6 xs:w-full xl:m-10 xl:ml-14 lg:m-6 lg:ml-12 md:m-4 md:ml-10 xs:ml-10">
            <button class="p-1 border-2 rounded border-indigo-600" @onclick="ToggleAnalysisContext">@(_showAnalysisContext ? "Hide analysis context" : "Show analysis context")</button>
        </div>

        <div class="@(_showAnalysisContext ? "" : "hidden")">
            <div class="xl:w-3/4 lg:w-4/5 md:w-5/6 xs:w-full xl:m-10 xl:ml-14 lg:m-6 lg:ml-12 md:m-4 md:ml-10 xs:m-1">
                <p class="border-indigo-600 border-b-2 border-t-2">
                    @Model.GetContextForAnalysis()
                </p>

                <h4>Locations</h4>
                <ul>
                @foreach (var location in Model.Analysis.Locations)
                {
                    <li>@location.Name</li>
                }
                </ul>

                <h4>Corporations</h4>
                <ul>
                @foreach (var corporation in Model.Analysis.Corporations)
                {
                    <li>@corporation.Name</li>
                }
                </ul>

                <h4>Organizations</h4>
                <ul>
                @foreach (var organization in Model.Analysis.Organizations)
                {
                    <li>@organization.Name</li>
                }
                </ul>
            </div>
        </div>
    }
}



@code {

    [Parameter]
    public Article? Model { get; set; }

    private bool HasSummary => Model?.Analysis.Summary != string.Empty;
    private bool _showSummary = false;
    private void ToggleSummary() => _showSummary = !_showSummary;

    private bool HasPositiveThings => Model?.Analysis.PositiveThings.Count > 0;
    private bool _showPositiveThings = false;
    private void TogglePositiveThings() => _showPositiveThings = !_showPositiveThings;

    private bool HasKeyPeople => Model?.Analysis.KeyPeople.Count > 0;
    private bool _showKeyPeople = false;
    private void ToggleKeyPeople() => _showKeyPeople = !_showKeyPeople;

    private bool _showAnalysisContext = false;
    private void ToggleAnalysisContext() => _showAnalysisContext = !_showAnalysisContext;

    private int _windowWidth = 1024;

    private DateTimeOffset Published
    {
        get
        {
            if (Model == null)
            {
                return DateTimeOffset.MinValue;
            }
            else
            {
                return new DateTimeOffset(new DateTime(Model.Modified, DateTimeKind.Utc));
            }
        }
    }

    // Using JS API to go back we save our query string
    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private string PreRender(string text)
    {
        var cols = (int)Math.Round(_windowWidth / 12.0);
        var sb = new StringBuilder();
        var lines = text.Split("\n");
        foreach(var line in lines)
        {
            if (line.Length > cols)
                sb.Append(SplitLine(line, cols));
            else
            {
                sb.Append(line);
                sb.Append("\n");
            }
        }
        return sb.ToString();
    }

    private string SplitLine(string line, int cols)
    {
        var sb = new StringBuilder();
        int position = 0;
        while (position < line.Length)
        {
            var length = line.Length < position + cols ? line.Length - position : cols;
            sb.Append(line.Substring(position, length));
            sb.Append("\n");
            position += cols;
        }
        return sb.ToString();
    }
    protected override async Task OnInitializedAsync()
    {
       _windowWidth = await JSRuntime.InvokeAsync<int>("eval", "window.innerWidth");
    }
}
