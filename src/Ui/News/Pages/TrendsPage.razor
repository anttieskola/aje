@{
    /* Purpose of page is to view trends of news sentiment polarity*/
}
@page "/trends"
@inject ISender Sender

<PageTitle>Trends</PageTitle>

@if (_segments == null)
{
    <p class="text-rose-600">null</p>
}
else
{
    <canvas id="canvasTrends" width="@_width" height="@_height"></canvas>
    for (var i = 0; i < _segments.Length; i++)
    {
        <ChartPeriodBar CanvasId="canvasTrends" StartPosition="@(i*_segmentWidth)" Width="@_segmentWidth"
    Segment="_segments[i]" />
    }
}

@code {
    private int _width = 1200;
    private int _height = 400;
    private int _segmentWidth => _segments.Length > 0 ? _width / _segments.Length : 0;
    private NewsPolarityTrendSegment[] _segments = new NewsPolarityTrendSegment[] { };
    private TimePeriod _timePeriod = TimePeriod.Day;
    private DateTimeOffset _start = DateTimeOffset.UtcNow.Date.AddMonths(-1);
    private DateTimeOffset _end = DateTimeOffset.UtcNow;

    private async Task Fetch()
    {
        _segments = await Sender.Send(new GetArticleSentimentPolarityTrendsQuery
            {
                ArticleCategory = ArticleCategory.NEWS,
                TimePeriod = _timePeriod,
                Start = _start,
                End = _end
            });
        await InvokeAsync(() => StateHasChanged());
    }
    protected override async Task OnInitializedAsync()
    {
        await Fetch();
    }
}