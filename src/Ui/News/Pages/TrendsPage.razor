@{
    /* Purpose of page is to view trends of news sentiment polarity */
}
@page "/trends"
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject ISender Sender

<PageTitle>Trends</PageTitle>

@if (_segments == null)
{
    <p class="text-rose-600">null</p>
}
else
{
    <canvas id="@_canvasId" width="@_width" height="@_height"></canvas>
    for (var i = 0; i < _segments.Length; i++)
    {
        <NewsTrendSegmentComponent CanvasId="@_canvasId" MaxCount="@_maxCount" StartPosition="@(i*_segmentWidth+20)"
    Width="@_segmentWidth" Segment="_segments[i]" />
    }

    <div class="mt-2 justify-center items-center">
    <div class="flex justify-center items-center">
        <span class="text-green-600">Positive</span>
        <span class="ml-1 text-orange-600">Neutral</span>
        <span class="ml-1 text-red-600">Negative</span>
        <span class="ml-1 text-slate-600">Unknown</span>
    </div>
</div>
}

@code {
    private const string _canvasId = "canvasTrends";
    private IJSObjectReference? _js;
    private int _width = 3000;
    private int _height = 800;
    private int _segmentWidth => _segments.Length > 0 ? (_width - 20) / _segments.Length : 0;
    private int _maxCount => _segments.Max(x => x.TotalCount);
    private NewsPolarityTrendSegment[] _segments = new NewsPolarityTrendSegment[] { };
    private TimePeriod _timePeriod = TimePeriod.Day;
    private DateTimeOffset _start = DateTimeOffset.UtcNow.AddDays(-60);
    private DateTimeOffset _end = DateTimeOffset.UtcNow;

    private async Task Fetch()
    {
        _segments = await Sender.Send(new GetArticleSentimentPolarityTrendsQuery
            {
                ArticleCategory = ArticleCategory.NEWS,
                TimePeriod = _timePeriod,
                Start = _start,
                End = _end
            });
        if (_js is not null)
        {
            await _js.InvokeVoidAsync("drawLabels", _canvasId, _maxCount);
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _js = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/TrendsPage.razor.js");
        await Fetch();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_js is not null)
        {
            await _js.DisposeAsync();
            _js = null;
        }
    }
}