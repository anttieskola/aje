@page "/search"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ISender Sender

<PageTitle>article search</PageTitle>

<div class="p-1 border-2 rounded-lg border-sky-600 xl:w-2/3 lg:w-3/4 xl:ml-14 lg:ml-12 md:ml-10 xs:ml-0">
    @if (!_isValid)
    {
        <div class="container">
            <p class="text-red-600">Search supports only digits / letters / '*'</p>
        </div>
    }
    <div class="lg:flex lg:p-1 md:flex md:p-1">
        <div class="lg:flex md:flex xs:flex">
            <div>
                <input id="searchKeyword" class="w-96 p-1" type="search" aria-label="search keyword"
                    @onchange="SearchChange" />
            </div>
        </div>
        <div class="lg:ml-8 lg:flex lg:mt-0 md:ml-4 md:flex md:mt-0 xs:flex xs:justify-center xs:items-center xs:mt-2">
            <div>
                @if (_isPreviousEnabled)
                {
                    <div class="mr-2">
                        <button aria-label="previous" class="w-16 min-w-16 submitButton" @onclick="Previous">
                            <Icon Name="arrow-left-square" Size="18" />
                        </button>
                    </div>
                }
                else
                {
                    <div class="mr-2">
                        <button aria-label="previous" class="w-16 min-w-16 submitButton" disabled @onclick="Previous">
                            <Icon Name="arrow-left-square" Size="18" />
                        </button>
                    </div>

                }
            </div>
            <div>
                @if (_isNextEnabled)
                {
                    <div class="ml-2">
                        <button aria-label="next" class="w-16 min-w-16 submitButton" @onclick="Next">
                            <Icon Name="arrow-right-square" Size="18" />
                        </button>
                    </div>
                }
                else
                {
                    <div class="ml-2">
                        <button aria-label="next" class="w-16 min-w-16 submitButton" disabled @onclick="Next">
                            <Icon Name="arrow-right-square" Size="18" />
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<table class="table-auto mt-1 xl:ml-14 lg:ml-12 md:ml-10 xs:ml-0">
    <tbody>
        @foreach (var item in _headers.Items)
        {
            <tr>
                <td>
                    <SentimentIcon Polarity="@item.Polarity" IconSize="30" IconPadding="0" />
                </td>
                <td>
                    @{
                        var href = $"/article/{item.Id}";
                    }
                    <NavLink href="@href">
                        @item.Title
                    </NavLink>
                </td>
            </tr>
            <tr>
            <td class="p-1"></td>
        </tr>
        }
    </tbody>
</table>



@code {

    private string _keyword = String.Empty;
    private bool _isValid = true;

    private void SearchChange(ChangeEventArgs args)
    {
        var newKeyWord = args?.Value?.ToString() ?? string.Empty;

        _isValid = true;
        foreach (var c in newKeyWord)
        {
            if (!char.IsLetterOrDigit(c) && c != ' ' && c != '*')
            {
                _isValid = false;
            }
        }

        if (_isValid && newKeyWord != _keyword)
        {
            _offset = 0;
            _keyword = newKeyWord;
            InvokeAsync(Fetch);
        }
    }


    private PaginatedList<ArticleHeader> _headers = new PaginatedList<ArticleHeader>(new List<ArticleHeader>(), 0, 0);
    private int _offset = 0;
    private int _pageSize = 9;

    private bool _isPreviousEnabled
    {
        get
        {
            return _headers.Offset >= _pageSize;
        }
    }

    private bool _isNextEnabled
    {
        get
        {
            return _headers.TotalCount > _pageSize + _headers.Offset;
        }
    }

    private async Task Previous()
    {
        if (_isPreviousEnabled)
        {
            _offset -= _pageSize;
            await Fetch();
        }
    }

    private async Task Next()
    {
        if (_isNextEnabled)
        {
            _offset += _pageSize;
            await Fetch();
        }
    }

    private async Task Fetch()
    {
        _headers = await Sender.Send(new ArticleSearchHeadersQuery
            {
                Keyword = _keyword,
                Offset = _offset,
                PageSize = _pageSize,
            });

        await InvokeAsync(() => StateHasChanged());
    }
    protected override async Task OnInitializedAsync()
    {
        // calculate page size based on screen size
        var windowHeight = await JSRuntime.InvokeAsync<int>("eval", "window.innerHeight");
        var windowWidth = await JSRuntime.InvokeAsync<int>("eval", "window.innerWidth");
        windowWidth = windowWidth > 1024 ? 1024 : windowWidth;
        _pageSize = (int)Math.Round((windowHeight * 2.0D) * (windowWidth * 0.5D) / 55000D);
        _pageSize = _pageSize < 9 ? 9 : _pageSize; // min 9 articles per page
    }
}
