@{
    /* Purpose of page is to list of current available articles */
}
@page "/"
@inject ISender Sender

<PageTitle>articles</PageTitle>

<label for="polarity">Sentiment</label>
<select name="polarity" @onchange="Polarity">
    <option value="">-</option>
    <option value="Positive" selected>Positive</option>
    <option value="Neutral">Neutral</option>
    <option value="Negative">Negative</option>
    <option value="Unknown">Unknown</option>
</select>

<label for="language">Language</label>
<select name="language" @onchange="Language">
    <option value="">-</option>
    <option value="en">en</option>
    <option value="fi">fi</option>
    <option value="krl">krl</option>
    <option value="ru">ru</option>
    <option value="se">se</option>
    <option value="smn">smn</option>
    <option value="sms">sms</option>
    <option value="uk">uk</option>
</select>

<table class="table-auto mt-1">
    <tbody>
        @foreach (var item in _headers.Items)
        {
            <tr>
                <td>
                    <SentimentIcon Polarity="@item.Polarity" IconSize="30" IconPadding="0" />
                </td>
                <td>
                    @{
                        var href = $"/article/{item.Id}";
                    }
                    <NavLink href="@href">
                        @item.Title
                    </NavLink>
                </td>
            </tr>
            <tr>
            <td class="p-1"></td>
        </tr>
        }
    </tbody>
</table>

<div class="flex flex-col sm:flex-row items-center justify-center">
    <div class="mt-2">
        @if (_isPreviousEnabled)
        {
            <button aria-label="previous" class="w-32 min-w-32 submitButton" @onclick="Previous">
                <Icon Name="arrow-left-square" Size="28" />
            </button>
        }
        else
        {
            <button aria-label="previous" class="w-32 min-w-32 submitButton" disabled @onclick="Previous">
                <Icon Name="arrow-left-square" Size="28" />
            </button>

        }
    </div>
    <div class="mt-2">
        @if (_isNextEnabled)
        {
            <button aria-label="next" class="w-32 min-w-32 submitButton" @onclick="Next">
                <Icon Name="arrow-right-square" Size="28" />
            </button>
        }
        else
        {
            <button aria-label="next" class="w-32 min-w-32 submitButton" disabled @onclick="Next">
                <Icon Name="arrow-right-square" Size="28" />
            </button>
        }
    </div>
</div>

@code {

    private string? _language;

    private async Task Language(ChangeEventArgs a)
    {
        if (a.Value is null || a.Value.ToString() == "")
            _language = null;
        else
            _language = a.Value.ToString();

        await InvokeAsync(() => Fetch());
    }

    private string? _polarity = "Positive";

    private async Task Polarity(ChangeEventArgs a)
    {
        if (a.Value is null || a.Value.ToString() == "")
            _polarity = null;
        else
            _polarity = a.Value.ToString();

        await InvokeAsync(() => Fetch());
    }

    private async Task Fetch(int offset = 0)
    {
        _headers = await Sender.Send(new GetArticleHeadersQuery
            {
                Offset = offset,
                PageSize = _pageSize,
                Language = string.IsNullOrEmpty(_language) ? null : _language,
                Polarity = string.IsNullOrEmpty(_polarity) ? null : Enum.Parse<Polarity>(_polarity),
            });

        await InvokeAsync(() => StateHasChanged());
    }


    #region table -> todo component

    private PaginatedList<ArticleHeader> _headers = new PaginatedList<ArticleHeader>(new List<ArticleHeader>(), 0, 0);

    private int _pageSize = 10;

    private bool _isPreviousEnabled
    {
        get
        {
            return _headers.Offset >= _pageSize;
        }
    }

    private bool _isNextEnabled
    {
        get
        {
            return _headers.TotalCount > _pageSize + _headers.Offset;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await Fetch();
    }

    private async Task Previous()
    {
        if (_isPreviousEnabled)
            await Fetch(_headers.Offset - _pageSize);
    }

    private async Task Next()
    {
        if (_isNextEnabled)
            await Fetch(_headers.Offset + _pageSize);
    }
    #endregion table -> todo component
}
